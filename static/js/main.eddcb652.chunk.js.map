{"version":3,"sources":["components/Login.js","content/labels.js","components/Logout.js","content/categories.js","components/Header.js","redux/actions/index.js","redux/constants/constants.js","components/ProductCard.js","pages/ProductPageLayout.js","App.js","serviceWorker.js","redux/reducers/login.js","redux/reducers/index.js","index.js"],"names":["Login","props","Dialog","open","isLoginOpen","onClose","onLoginClose","aria-labelledby","DialogTitle","id","DialogContent","TextField","autoFocus","margin","name","label","type","variant","onChange","onLoginChange","required","fullWidth","DialogActions","Button","onClick","onLoginClick","color","Logout","isLogoutOpen","onLogoutClose","Typography","paragraph","onLogoutClick","useStyles","makeStyles","root","flexGrow","appBar","flexDirection","justifyContent","backgroundColor","borderBottom","title","loginButton","marginRight","connect","state","status","login","dispatch","loginUser","username","payload","logoutUser","classes","React","useState","setIsLoginOpen","setIsLogoutOpen","password","form","setForm","className","AppBar","position","elevation","Toolbar","isUserLoggedIn","event","target","value","maxHeight","minHeight","width","categoryImage","objectFit","cardAction","ProductCard","Grid","item","xs","sm","md","Card","CardActionArea","CardMedia","component","alt","description","height","image","process","CardContent","publicData","categories","categoryItems","setCategoryItems","useEffect","privateData","container","justify","map","category","key","App","Boolean","window","location","hostname","match","initialState","action","combineReducers","store","createStore","rootReducer","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.eddcb652.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { LABEL_LOGIN, LABEL_USERNAME, LABEL_PASSWORD } from \"../content/labels\";\n\nexport default function Login(props) {\n  return (\n    <>\n      <Dialog\n        open={props.isLoginOpen}\n        onClose={props.onLoginClose}\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <DialogTitle id=\"form-dialog-title\">{LABEL_LOGIN}</DialogTitle>\n        <DialogContent>\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id=\"username\"\n            name=\"username\"\n            label={LABEL_USERNAME}\n            type=\"text\"\n            variant=\"outlined\"\n            onChange={props.onLoginChange}\n            required\n            fullWidth\n          />\n          <TextField\n            margin=\"dense\"\n            name=\"password\"\n            id=\"password\"\n            label={LABEL_PASSWORD}\n            type=\"password\"\n            variant=\"outlined\"\n            onChange={props.onLoginChange}\n            required\n            fullWidth\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={props.onLoginClick} color=\"primary\">\n            {LABEL_LOGIN}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n}\n\nLogin.propTypes = {\n  isLoginOpen: PropTypes.bool,\n  onLoginClose: PropTypes.func,\n  onLoginChange: PropTypes.func,\n  onLoginClick: PropTypes.func,\n};\n","export const LABEL_LOGIN = \"Login\"\nexport const LABEL_LOGOUT = \"Logout\"\nexport const LABEL_USERNAME = \"Username\"\nexport const LABEL_PASSWORD = \"Password\"\nexport const LABEL_WELCOME = \"Welcome\"","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport { LABEL_LOGOUT } from \"../content/labels\";\nimport { CATEGORY_LOGOUT_DESCRIPTION } from \"../content/categories\";\n\nexport default function Logout(props) {\n  return (\n    <>\n      <Dialog\n        open={props.isLogoutOpen}\n        onClose={props.onLogoutClose}\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <DialogTitle id=\"form-dialog-title\">{LABEL_LOGOUT}</DialogTitle>\n        <DialogContent>\n          <Typography paragraph>\n            {CATEGORY_LOGOUT_DESCRIPTION}\n          </Typography>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={props.onLogoutClick} color=\"primary\">\n            {LABEL_LOGOUT}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n}\n\nLogout.propTypes = {\n  isLogoutOpen: PropTypes.bool,\n  onLogoutClose: PropTypes.func,\n  onLogoutClick: PropTypes.func,\n};\n","export const CATEGORY_PAGE_TITLE = \"Categories\"\nexport const CATEGORY_LOGOUT_DESCRIPTION = \"Are you sure you want to logout?\"","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport { CATEGORY_PAGE_TITLE } from \"../content/categories\";\nimport { LABEL_LOGIN, LABEL_WELCOME } from \"../content/labels\";\nimport { connect } from \"react-redux\";\nimport { loginUser, logoutUser } from \"../redux/actions\";\nimport Login from \"./Login\";\nimport Logout from \"./Logout\";\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    flexGrow: 1,\n    margin: \"auto\",\n  },\n  appBar: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    backgroundColor: \"#FFFFFF\",\n    color: \"#5a4343\",\n    borderBottom: \"1px solid #5a4343\",\n  },\n  title: {\n    flexGrow: 1,\n  },\n  loginButton: {\n    marginRight: 20,\n  },\n}));\n\nfunction Header(props) {\n  const classes = useStyles();\n  const [isLoginOpen, setIsLoginOpen] = React.useState(false);\n  const [isLogoutOpen, setIsLogoutOpen] = React.useState(false);\n  const [form, setForm] = React.useState({\n    username: \"\",\n    password: \"\",\n  });\n\n  const handleOpenLogin = () => {\n    setIsLoginOpen(true);\n  };\n\n  const handleOpenLogout = () => {\n    setIsLogoutOpen(true);\n  } \n\n  const handleCloseLogin = () => {\n    setIsLoginOpen(false);\n  };\n\n  const handleCloseLogout = () => {\n    setIsLogoutOpen(false);\n  }\n\n  const handleLoginClick = () => {\n    const { username, password } = form;\n\n    if (username && password) {\n      props.loginUser({ username });\n    }\n    setIsLoginOpen(false);\n  };\n\n  const handleLogoutClick = () => {\n    props.logoutUser();\n    setIsLogoutOpen(false);\n  };\n\n  const handleLoginChange = (event) => {\n    const { value, name } = event.target;\n    setForm({ ...form, [name]: value });\n  };\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\" className={classes.appBar} elevation={0}>\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            {CATEGORY_PAGE_TITLE}\n          </Typography>\n        </Toolbar>\n        {!props.status.isUserLoggedIn ? (\n          <Button\n            color=\"inherit\"\n            className={classes.loginButton}\n            onClick={handleOpenLogin}\n          >\n            {LABEL_LOGIN}\n          </Button>\n        ) : (\n          <Button\n            onClick={handleOpenLogout}\n            color=\"inherit\"\n            className={classes.loginButton}\n          >\n            {LABEL_WELCOME} {props.status.username}\n          </Button>\n        )}\n        <Login\n            isLoginOpen={isLoginOpen}\n            onLoginClose={handleCloseLogin}\n            onLoginChange={handleLoginChange}\n            onLoginClick={handleLoginClick}\n        />\n        <Logout\n            isLogoutOpen={isLogoutOpen}\n            onLogoutClose={handleCloseLogout}\n            onLogoutClick={handleLogoutClick}\n        />\n      </AppBar>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  status: state.login,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  loginUser: (username) => dispatch(loginUser(username)),\n  logoutUser: () => dispatch(logoutUser()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\n","import { LOGIN_USER, LOGOUT_USER } from \"../constants/constants\";\n\nexport const loginUser = data => ({\n    type: LOGIN_USER,\n    payload: data\n})\n\nexport const logoutUser = () => ({\n    type: LOGOUT_USER\n})","export const LOGIN_USER = \"LOGIN_USER\";\nexport const LOGOUT_USER = \"LOGOUT_USER\";","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport PropTypes from \"prop-types\";\nimport { Typography } from \"@material-ui/core\";\n\nconst useStyles = makeStyles({\n  root: {\n    maxHeight: 450,\n    minHeight: 100,\n    width: \"80%\",\n    margin: \"20px auto\",\n  },\n  categoryImage: {\n    objectFit: \"scale-down\",\n  },\n  cardAction: {\n    justifyContent: \"center\",\n  }\n});\n\nfunction ProductCard(props) {\n  const classes = useStyles();\n\n  return (\n    <Grid item xs={12} sm={6} md={4}>\n      <Card className={classes.root} elevation={0}>\n        <CardActionArea>\n          <CardMedia\n            className={classes.categoryImage}\n            component=\"img\"\n            alt={props.description}\n            height=\"253\"\n            image={`${process.env.PUBLIC_URL}${props.image}`}\n            title={props.description}\n          />\n          <CardContent>\n            <Typography variant=\"h6\">{props.description}</Typography>\n          </CardContent>\n        </CardActionArea>\n      </Card>\n    </Grid>\n  );\n}\n\nexport default ProductCard;\n\nProductCard.propTypes = {\n  description: PropTypes.string,\n  image: PropTypes.string,\n};\n","import React from 'react'\nimport { connect } from 'react-redux';\nimport { CATEGORY_PAGE_TITLE } from \"../content/categories\";\nimport Header from '../components/Header';\nimport { Grid } from '@material-ui/core';\nimport publicData from '../data/public.json';\nimport privateData from '../data/private.json';\nimport ProductCard from '../components/ProductCard';\n\nfunction ProductPageLayout(props) {\n    const [categoryItems, setCategoryItems] = React.useState(publicData.categories);\n\n    React.useEffect(() => {\n        if (props.status.isUserLoggedIn) {\n            setCategoryItems(privateData.categories)\n        } else {\n            setCategoryItems(publicData.categories)\n        }\n    }, [props.status.isUserLoggedIn])\n\n    return (\n        <div>\n            <Header />\n            <h1>{CATEGORY_PAGE_TITLE}</h1>\n            <Grid container justify=\"center\">\n                {categoryItems.map(category => {\n                    return (\n                        <ProductCard\n                            key={category.id}\n                            description={category.description}\n                            image={category.image}\n                        />\n                    )\n                })}\n            </Grid>\n        </div>\n    )\n}\n\nconst mapStateToProps = state => ({\n    status: state.login,\n})\n\nexport default connect(mapStateToProps)(ProductPageLayout);\n","import React from 'react';\nimport './App.css';\nimport ProductPageLayout from './pages/ProductPageLayout';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ProductPageLayout />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { LOGIN_USER, LOGOUT_USER } from \"../constants/constants\";\n\nconst initialState = {\n    isUserLoggedIn: false,\n    username: \"\"\n}\n\nconst login = (state = initialState, action) => {\n    switch (action.type) {\n        case LOGIN_USER:\n            return {\n                ...state,\n                ...action.payload,\n                isUserLoggedIn: true\n            }\n\n        case LOGOUT_USER:\n            return initialState\n\n        default:\n            return state;\n    }\n}\n\nexport default login;","import { combineReducers } from 'redux'\nimport login from './login'\n\nexport default combineReducers({\n    login\n})","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport rootReducer from \"./redux/reducers\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}